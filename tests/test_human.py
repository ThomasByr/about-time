# coding=utf-8
from __future__ import absolute_import, division, unicode_literals

import pytest

from about_time import duration_human, throughput_human, count_human


@pytest.mark.parametrize('duration, expected', [
    (.00000000123, '1.23ns'),
    (.00000000185, '1.85ns'),
    (.000000001855, '1.85ns'),
    (.0000000018551, '1.86ns'),
    (.000001, '1.00µs'),
    (.000000999996, '1.00µs'),
    (.00001, '10.0µs'),
    (.0000156, '15.6µs'),
    (.01, '10.0ms'),
    (.0141233333333, '14.1ms'),
    (.000999999, '1.00ms'),
    (.0199999, '20.0ms'),
    (.1099999, '110ms'),
    (.1599999, '160ms'),
    (.8015, '802ms'),
    (3.434999, '3.43s'),
    (3.435999, '3.44s'),
    (59.9, '59.9s'),
    (59.99, '60.0s'),
    (59.9999999, '60.0s'),
    (60.0, '0:01:00'),
    (68.5, '0:01:08'),
    (68.09, '0:01:08'),
    (60.99, '0:01:01'),
    (125.825, '0:02:06'),
    (4488.395, '1:14:48'),
])
def test_duration_human(duration, expected):
    assert duration_human(duration) == expected


@pytest.mark.parametrize('duration, count, expected', [
    (1., 1, '1.00/s'),
    (1., 10, '10.0/s'),
    (2., 1, '30.0/m'),
    (2., 10, '5.00/s'),
    (2., 11, '5.50/s'),
    (1.981981981981982, 11, '5.55/s'),
    (100., 10, '6.00/m'),
    (100., 3, '1.80/m'),
    (110., 8, '4.36/m'),
    (1600., 3, '6.75/h'),
    (67587655435., 5432737542, '4.82/m'),
    (67587655435., 543273754, '28.9/h'),
    (67587655435., 543273754271, '8.04/s'),
    (.99, 1, '1.01/s'),
    (.999, 1, '1.00/s'),
    (1.00001, 1, '1.00/s'),
    (1.0001, 1, '1.00/s'),
    (1165263., 123, '9.12/d'),
    (3599., 1, '1.00/h'),
    (3600., 1, '1.00/h'),
    (3601., 1, '1.00/h'),
    (3608., 1, '23.9/d'),
    (80000., 2, '2.16/d'),
])
def test_throughput_human(duration, count, expected):
    assert throughput_human(count / duration) == expected


@pytest.mark.parametrize('value, expected', [
    (1.23, '1.23b/s'),
    (12.3, '12.3b/s'),
    (123., '123b/s'),
    (1230., '1.23kb/s'),
    (12300., '12.3kb/s'),
    (123000., '123kb/s'),
    (1230000., '1.23Mb/s'),
    (12300000., '12.3Mb/s'),
    (123000000., '123Mb/s'),
    (1230000000., '1.23Gb/s'),
    (12300000000., '12.3Gb/s'),
    (123000000000., '123Gb/s'),
    (1230000000000., '1.23Tb/s'),
    (12300000000000., '12.3Tb/s'),
    (123000000000000., '123Tb/s'),
    (1230000000000000., '1.23Pb/s'),
    (12300000000000000., '12.3Pb/s'),
    (123000000000000000., '123Pb/s'),
    (1230000000000000000., '1.23Eb/s'),
    (12300000000000000000., '12.3Eb/s'),
    (123000000000000000000., '123Eb/s'),
    (1230000000000000000000., '1.23Zb/s'),
    (12300000000000000000000., '12.3Zb/s'),
    (123000000000000000000000., '123Zb/s'),
    (1230000000000000000000000., '1.23Yb/s'),
    (12300000000000000000000000., '12.3Yb/s'),
    (123000000000000000000000000., '123Yb/s'),
    (1230000000000000000000000000., '1.23Y+b/s'),
    (2500., '2.50kb/s'),
    (1825000., '1.82Mb/s'),
    (1825100., '1.83Mb/s'),
    (.5, '30.0b/m'),
    (.001875, '6.75b/h'),
    (.008038061839894, '28.9b/h'),
    (.000025, '2.16b/d'),
])
def test_what_throughput_human(value, expected):
    assert throughput_human(value, 'b') == expected
