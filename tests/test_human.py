# coding=utf-8
from __future__ import absolute_import, division, unicode_literals

import pytest

from about_time import HumanDuration, HumanThroughput, HumanCount


@pytest.mark.parametrize('duration, expected', [
    (.00000000123, '1.2ns'),
    (.00000000185, '1.9ns'),
    (.000001, '1µs'),
    (.000000999996, '1µs'),
    (.00001, '10µs'),
    (.0000156, '15.6µs'),
    (.01, '10ms'),
    (.0141233333333, '14.1ms'),
    (.000999999, '1ms'),
    (.0199999, '20ms'),
    (.1099999, '110ms'),
    (.160594034, '160.6ms'),
    (.80153, '801.5ms'),
    (3.434999, '3.43s'),
    (3.435999, '3.44s'),
    (59.9, '59.9s'),
    (59.99, '59.99s'),
    (59.999, '1:00'),
    (60.0, '1:00'),
    (60.99, '1:01'),
    (68., '1:08'),
    (68.09, '1:08.1'),
    (125.825, '2:05.8'),
    (3888.395, '1:04:48'),
])
def test_duration_human(duration, expected):
    assert HumanDuration(duration) == expected


@pytest.mark.parametrize('duration, expected', [
    (.00000000123, '1.2ns'),
    (.00000000185, '1.9ns'),
    (.000001, '1.0µs'),
    (.000000999996, '1.0µs'),
    (.00001, '10.0µs'),
    (.0000156, '15.6µs'),
    (.01, '10.0ms'),
    (.0141233333333, '14.1ms'),
    (.000999999, '1.0ms'),
    (.0199999, '20.0ms'),
    (.1099999, '110.0ms'),
    (.160594034, '160.6ms'),
    (.80153, '801.5ms'),
    (3.434999, '3.4s'),
    (3.435999, '3.4s'),
    (59.9, '59.9s'),
    (59.99, '60.0s'),
    (59.999, '1:00.0'),
    (60.0, '1:00.0'),
    (60.99, '1:01.0'),
    (68., '1:08.0'),
    (68.09, '1:08.1'),
    (125.825, '2:05.8'),
    (3888.395, '1:04:48'),
])
def test_duration_human_prec(duration, expected):
    assert HumanDuration(duration).as_human(1) == expected


@pytest.mark.parametrize('count, duration, expected', [
    (1, 1., '1X/s'),
    (10, 1., '10X/s'),
    (1, 2., '30X/m'),
    (10, 2., '5X/s'),
    (11, 2., '5.5X/s'),
    (11, 1.981981981981982, '5.5X/s'),
    (10, 100., '6X/m'),
    (3, 100., '1.8X/m'),
    (8, 110., '4.4X/m'),
    (3, 1600., '6.8X/h'),
    (5432737542, 67587655435., '4.8X/m'),
    (543273754, 67587655435., '28.9X/h'),
    (543273754271, 67587655435., '8X/s'),
    (1, .99, '1X/s'),
    (1, 1.0001, '1X/s'),
    (123, 1165263., '9.12X/d'),
    (1, 3599., '1X/h'),
    (1, 3601., '23.99X/d'),
    (1, 3608., '23.95X/d'),
    (2, 80000., '2.16X/d'),
])
def test_throughput_human(count, duration, expected):
    assert HumanThroughput(count / duration, 'X') == expected
    assert HumanThroughput(count / duration, '!').unit('X') == expected


@pytest.mark.parametrize('count, duration, expected', [
    (1, 1., '1.0X/s'),
    (10, 1., '10.0X/s'),
    (1, 2., '30.0X/m'),
    (10, 2., '5.0X/s'),
    (11, 2., '5.5X/s'),
    (11, 1.981981981981982, '5.5X/s'),
    (10, 100., '6.0X/m'),
    (3, 100., '1.8X/m'),
    (8, 110., '4.4X/m'),
    (3, 1600., '6.8X/h'),
    (5432737542, 67587655435., '4.8X/m'),
    (543273754, 67587655435., '28.9X/h'),
    (543273754271, 67587655435., '8.0X/s'),
    (1, .99, '1.0X/s'),
    (1, 1.0001, '1.0X/s'),
    (123, 1165263., '9.1X/d'),
    (1, 3599., '1.0X/h'),
    (1, 3601., '24.0X/d'),
    (1, 3608., '23.9X/d'),
    (2, 80000., '2.2X/d'),
])
def test_throughput_human_prec(count, duration, expected):
    assert HumanThroughput(count / duration, 'X').as_human(1) == expected
    assert HumanThroughput(count / duration, '!').unit('X').as_human(1) == expected


@pytest.mark.parametrize('count, expected', [
    (1.23, '1.2X'),
    (12.3, '12.3X'),
    (123., '123X'),
    (1230., '1.2kX'),
    (12300., '12.3kX'),
    (123000., '123kX'),
    (1230000., '1.2MX'),
    (12300000., '12.3MX'),
    (123000000., '123MX'),
    (1230000000., '1.23GX'),
    (12300000000., '12.3GX'),
    (123000000000., '123GX'),
    (1230000000000., '1.23TX'),
    (12300000000000., '12.3TX'),
    (123000000000000., '123TX'),
    (1230000000000000., '1.23PX'),
    (12300000000000000., '12.3PX'),
    (123000000000000000., '123PX'),
    (1230000000000000000., '1.23EX'),
    (12300000000000000000., '12.3EX'),
    (123000000000000000000., '123EX'),
    (1230000000000000000000., '1.23ZX'),
    (12300000000000000000000., '12.3ZX'),
    (123000000000000000000000., '123ZX'),
    (1230000000000000000000000., '1.23YX'),
    (12300000000000000000000000., '12.3YX'),
    (123000000000000000000000000., '123YX'),
    (1230000000000000000000000000., '1.23+X'),
    (2000., '2kX'),
    (2500., '2.5kX'),
    (1825000., '1.8MX'),
    (1825100., '1.8MX'),
    (1825000000., '1.82GX'),
    (1825100000., '1.83GX'),
])
def test_count_human(count, expected):
    assert HumanCount(count, 'X') == expected
    assert HumanCount(count, '!').unit('X') == expected


@pytest.mark.parametrize('count, expected', [
    (1.23, '1.2X'),
    (12.3, '12.3X'),
    (123., '123.0X'),
    (1230., '1.2kX'),
    (12300., '12.3kX'),
    (123000., '123.0kX'),
    (1230000., '1.2MX'),
    (12300000., '12.3MX'),
    (123000000., '123.0MX'),
    (1230000000., '1.2GX'),
    (12300000000., '12.3GX'),
    (123000000000., '123.0GX'),
    (1230000000000., '1.2TX'),
    (12300000000000., '12.3TX'),
    (123000000000000., '123.0TX'),
    (1230000000000000., '1.2PX'),
    (12300000000000000., '12.3PX'),
    (123000000000000000., '123.0PX'),
    (1230000000000000000., '1.2EX'),
    (12300000000000000000., '12.3EX'),
    (123000000000000000000., '123.0EX'),
    (1230000000000000000000., '1.2ZX'),
    (12300000000000000000000., '12.3ZX'),
    (123000000000000000000000., '123.0ZX'),
    (1230000000000000000000000., '1.2YX'),
    (12300000000000000000000000., '12.3YX'),
    (123000000000000000000000000., '123.0YX'),
    (1230000000000000000000000000., '1.2+X'),
    (2000., '2.0kX'),
    (2500., '2.5kX'),
    (1825000., '1.8MX'),
    (1825100., '1.8MX'),
    (1825000000., '1.8GX'),
    (1825100000., '1.8GX'),
])
def test_count_human_prec(count, expected):
    assert HumanCount(count, 'X').as_human(1) == expected
    assert HumanCount(count, '!').unit('X').as_human(1) == expected
